// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: docs_instances.sql

package repository

import (
	"context"
)

const addDocsInstance = `-- name: AddDocsInstance :one
INSERT INTO "docs_instances" (
    "ownerId", "name", "public", "repoOwner", "repoName", "repoRef", "root"
)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"
`

type AddDocsInstanceParams struct {
	OwnerId   int32  `json:"ownerId"`
	Name      string `json:"name"`
	Public    bool   `json:"public"`
	RepoOwner string `json:"repoOwner"`
	RepoName  string `json:"repoName"`
	RepoRef   string `json:"repoRef"`
	Root      string `json:"root"`
}

func (q *Queries) AddDocsInstance(ctx context.Context, arg AddDocsInstanceParams) (int32, error) {
	row := q.db.QueryRow(ctx, addDocsInstance,
		arg.OwnerId,
		arg.Name,
		arg.Public,
		arg.RepoOwner,
		arg.RepoName,
		arg.RepoRef,
		arg.Root,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const countUserDocsInstances = `-- name: CountUserDocsInstances :one
SELECT COUNT(*) FROM "docs_instances" WHERE "ownerId" = $1
`

func (q *Queries) CountUserDocsInstances(ctx context.Context, ownerid int32) (int64, error) {
	row := q.db.QueryRow(ctx, countUserDocsInstances, ownerid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDocsInstanceById = `-- name: GetDocsInstanceById :one
SELECT id, "ownerId", name, public, "repoOwner", "repoName", "repoRef", root FROM "docs_instances" WHERE "id" = $1
`

func (q *Queries) GetDocsInstanceById(ctx context.Context, id int32) (DocsInstance, error) {
	row := q.db.QueryRow(ctx, getDocsInstanceById, id)
	var i DocsInstance
	err := row.Scan(
		&i.ID,
		&i.OwnerId,
		&i.Name,
		&i.Public,
		&i.RepoOwner,
		&i.RepoName,
		&i.RepoRef,
		&i.Root,
	)
	return i, err
}

const getDocsInstanceByName = `-- name: GetDocsInstanceByName :one
SELECT id, "ownerId", name, public, "repoOwner", "repoName", "repoRef", root FROM "docs_instances" WHERE "name" = $1
`

func (q *Queries) GetDocsInstanceByName(ctx context.Context, name string) (DocsInstance, error) {
	row := q.db.QueryRow(ctx, getDocsInstanceByName, name)
	var i DocsInstance
	err := row.Scan(
		&i.ID,
		&i.OwnerId,
		&i.Name,
		&i.Public,
		&i.RepoOwner,
		&i.RepoName,
		&i.RepoRef,
		&i.Root,
	)
	return i, err
}

const listDocsInstances = `-- name: ListDocsInstances :many
SELECT id, "ownerId", name, public, "repoOwner", "repoName", "repoRef", root FROM "docs_instances" LIMIT $1 OFFSET $2
`

type ListDocsInstancesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDocsInstances(ctx context.Context, arg ListDocsInstancesParams) ([]DocsInstance, error) {
	rows, err := q.db.Query(ctx, listDocsInstances, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DocsInstance
	for rows.Next() {
		var i DocsInstance
		if err := rows.Scan(
			&i.ID,
			&i.OwnerId,
			&i.Name,
			&i.Public,
			&i.RepoOwner,
			&i.RepoName,
			&i.RepoRef,
			&i.Root,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserDocsInstances = `-- name: ListUserDocsInstances :many
SELECT id, "ownerId", name, public, "repoOwner", "repoName", "repoRef", root FROM "docs_instances" WHERE "ownerId" = $1 LIMIT $2 OFFSET $3
`

type ListUserDocsInstancesParams struct {
	OwnerId int32 `json:"ownerId"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListUserDocsInstances(ctx context.Context, arg ListUserDocsInstancesParams) ([]DocsInstance, error) {
	rows, err := q.db.Query(ctx, listUserDocsInstances, arg.OwnerId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DocsInstance
	for rows.Next() {
		var i DocsInstance
		if err := rows.Scan(
			&i.ID,
			&i.OwnerId,
			&i.Name,
			&i.Public,
			&i.RepoOwner,
			&i.RepoName,
			&i.RepoRef,
			&i.Root,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDocsInstance = `-- name: RemoveDocsInstance :exec
DELETE FROM "docs_instances" WHERE "id" = $1
`

func (q *Queries) RemoveDocsInstance(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, removeDocsInstance, id)
	return err
}

const updateDocsInstance = `-- name: UpdateDocsInstance :exec
UPDATE "docs_instances" SET
    "name" = $2,
    "public" = $3,
    "repoOwner" = $4,
    "repoName" = $5,
    "repoRef" = $6,
    "root" = $7
WHERE "id" = $1
`

type UpdateDocsInstanceParams struct {
	ID        int32  `json:"id"`
	Name      string `json:"name"`
	Public    bool   `json:"public"`
	RepoOwner string `json:"repoOwner"`
	RepoName  string `json:"repoName"`
	RepoRef   string `json:"repoRef"`
	Root      string `json:"root"`
}

func (q *Queries) UpdateDocsInstance(ctx context.Context, arg UpdateDocsInstanceParams) error {
	_, err := q.db.Exec(ctx, updateDocsInstance,
		arg.ID,
		arg.Name,
		arg.Public,
		arg.RepoOwner,
		arg.RepoName,
		arg.RepoRef,
		arg.Root,
	)
	return err
}
